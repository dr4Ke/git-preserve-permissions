#!/usr/bin/perl
# git-preserve-permissions stores/restores metadata in a git repository
#    git-preserve-permissions Copyright (C) 2012-2014 Christophe Drevet <christophe.drevet@gmail.com>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
$version = "1.3";
$dataversion = "1.3";
use lib (split(/:/, $ENV{GITPERLLIB}));

use File::Basename;
#use integer;
my $gpp_name = basename($0);

# Arguments
use Getopt::Long;
my $action_check = 0;
my $action_save = 0;
my $action_restore = 0;
my $verbose = 0;
my $debug = 0;
my $hook = 0;

GetOptions('check'   => \$action_check,
           'save'    => \$action_save,
           'restore' => \$action_restore,
           'verbose' => \$verbose,
           'debug'   => \$debug,
           'hook'    => \$hook);

sub usage () {
    print $gpp_name." --check | --save | --restore [--verbose] [--debug] [--hook]\n";
    print "Version: ".$version."\n";
    print "\n";
    print "Configuration:\n";
    print "    preserve-permissions.file:  file to use (default: .git-preserve-permissions)\n";
    print "    preserve-permissions.user:  save user id (default: false)\n";
    print "    preserve-permissions.group: save group id (default: false)\n";
    print "    preserve-permissions.perms: save permissions using this octal\n";
    print "                                mask (default: 0700)\n";
    print "\n";
    print "pre-commit hook configuration:\n";
    print "    preserve-permissions.autosave:      automaticaly save permissions during pre-commit\n";
    print "                                        defaults to true\n";
    print "    preserve-permissions.autosavePatch: interactive add (-p) if autosave in true\n";
    print "                                        defaults to false\n";
    print "\n";
    print "git-preserve-permissions Copyright (C) 2012-2014 Christophe Drevet\n";
    print "                                            <christophe.drevet\@gmail.com>\n";
    print "This program comes with ABSOLUTELY NO WARRANTY. This is free software, and you\n";
    print "are welcome to redistribute it under certain conditions; see COPYRIGHT file.\n";
}

# git configuration options
use Git;
my $repo = Git->repository();
my %options;
$options{'wc_path'} = $repo->wc_path;
print {STDERR} "DEBUG: Working copy path: ".$options{'wc_path'}."\n" if $debug;
chdir $options{'wc_path'};
$options{'file'} = ($repo->config('preserve-permissions.file') or '.git-preserve-permissions');
$options{'user'} = ($repo->config_bool('preserve-permissions.user') or 0);
$options{'group'} = ($repo->config_bool('preserve-permissions.group') or 0);
$options{'perms'} = oct($repo->config('preserve-permissions.perms') or '0700');

print {STDERR} "DEBUG: settings:\n" if $debug;
print {STDERR} "DEBUG: preserve-permissions.user: ".$options{'user'}."\n" if $debug;
print {STDERR} "DEBUG: preserve-permissions.group: ".$options{'group'}."\n" if $debug;
printf {STDERR} "DEBUG: preserve-permissions.perms: %04o\n", $options{'perms'} if $debug;

# Check database version
if (not $action_save) {
    my $name = $options{'file'};
    my $fh;
    if (-e $name) {
        open($fh, "< $name") or die $gpp_name.": Could not open file: $name\n";
        my $firstline = <$fh>;
        close($fh);
        if ($firstline =~ /^#FORMAT:/) {
            $firstline =~ /^#FORMAT:([0-9\.]+)$/;
            my $filever = $1;
            if ($filever != $dataversion) {
                printf "WARNING: Incorrect database version ($filever != $dataversion)\n";
                printf "         Please make sure to update the database.\n";
            }
        } else {
            printf "WARNING: Database version outdated (<1.3).\n";
            printf "         Please make sure to update the database.\n";
        }
    }
}

if (not ($action_check || $action_save || $action_restore)) {
    usage;
    exit 2;
}

# Execution functions
my $old_mode_format = 0;
my $changed_uid = 0;
my $changed_gid = 0;
sub validate_values {
    my ($mode, $uid, $gid, $file) = @_;
    # Checking old store format (decimal)
    if ( int($mode) > 7777 ) {
        printf {STDERR} "DEBUG: mode %o stored in decimal form (%d)\n", $mode, $mode if $debug;
        printf "WARNING: Modes are stored in decimal form.\n" if ($old_mode_format == 0);
        $old_mode_format = 1;
        $mode &= 07777;
    } else {
        $mode = oct($mode);
    }
    if ($options{'user'}) {
        $uid = -1 if ($uid eq '');
    }
    if ($options{'group'}) {
        $gid = -1 if ($gid eq '');
    }
    printf {STDERR} "DEBUG: file status saved: %s, %04o, %s, %s\n", $file, $mode, $uid, $gid if $debug;
    return ($mode, $uid, $gid, $file);
}

my @file_status_file = ('', '', '', '');
sub file_status_get {
    my ($file) = @_;
    my ($actual_mode, $actual_uid, $actual_gid);
    if ($file_status_file[0] eq $file) {
        ($actual_mode, $actual_uid, $actual_gid) = (@file_status_file)[1,2,3];
        printf {STDERR} "DEBUG: file status cached: '%s', %04o, %s, %s\n",
               $file,
               $actual_mode,
               $actual_uid,
               $actual_gid if $debug;
    } else {
        ($actual_mode, $actual_uid, $actual_gid) = (lstat($file))[2,4,5];
        $actual_mode &= 07777;
        @file_status_file = ($file,
                              $actual_mode,
                              $actual_uid,
                              $actual_gid
                            );
        printf {STDERR} "DEBUG: file status: '%s', %04o, %s, %s\n",
               $file,
               $actual_mode,
               $actual_uid,
               $actual_gid if $debug;
    }
    return ($actual_mode, $actual_uid, $actual_gid);
}
sub file_status_cache_flush {
    @file_status_file = ('', '', '', '');
}

sub file_status_print {
    my ($file, $message) = @_;
    printf "%s: %s\n", $file, $message if $verbose;
}

sub check_ids {
    my ($file, $uid, $gid) = @_;
    my ($actual_uid, $actual_gid) = (file_status_get($file))[1,2];
    my $result = 0;
    if ($options{'user'} and ($actual_uid != $uid)) {
        file_status_print($file,
            'user changed from '.$uid.' to '.$actual_uid);
        $result = 1
    }
    if ($options{'group'} and ($actual_gid != $gid)) {
        file_status_print($file,
            'group changed from '.$gid.' to '.$actual_gid);
        $result = 1
    }
    return $result;
}

sub check_mode {
    my ($file, $mode) = @_;
    my ($actual_mode) = (file_status_get($file))[0];
    my $actual_masked_mode = $actual_mode & $options{'perms'};
    my $saved_mode = $mode & $options{'perms'};
    if ($saved_mode != $actual_masked_mode) {
        file_status_print($file,
            sprintf('masked (%04o) mode changed from %04o to %04o',
                    $options{'perms'}, $saved_mode, $actual_masked_mode)
            );
        return 1;
    }
    return 0;
}

sub gpp_check () {
    print "Checking...\n" if $verbose;
    my $name = $options{'file'};
    my $fh;
    my %changed_files;
    my %known_files;
    my $unknown_files = 0;
    
    if (! -e $name) {
        print $gpp_name.": $name does not exist.\n" if not $hook;
        print "use '".$gpp_name." --save' to initialize it.\n" if not $hook;
        return 1;
    }
    
    open($fh, "< $name") or die $gpp_name.": Could not open file: $name\n";
    
    # Check known files for changes
    my $result;
    while ( ! eof($fh) ) {
        defined( $_ = <$fh> ) or die "readline failed: $!";
        chomp;
        next if (/^#/);
        my ($mode, $uid, $gid, $file) = validate_values(split(/:/, $_, 4));
        $known_files{$file} = 1;
        next if (-l $file);
        if (-e $file) {
            $result |= check_mode($file, $mode);
            $result |= check_ids($file, $uid, $gid);
        } else {
            printf "WARNING: file '%s' does not exist\n", $file if not $hook;
        }
    }
    
    # Check git ls-files for unknown files
    my $output = `git ls-files -z`;
    foreach ( split("\0", $output) ) {
        if ((not -l $_) and (not exists $known_files{$_})) {
            print "File not known into $name: $_\n" if $verbose;
            $unknown_files += 1;
        }
    }
    
    
    close($fh);
    
    my $check_code = 0;

    if ($unknown_files > 0) {
        print "$unknown_files unknown file(s)\n" if not $hook;
        $check_code = 1;
    }

    if ($result != 0) {
        print "Some file(s) metadata has changed\n" if not $hook;
        $check_code = 1;
    }
    
    if (not $verbose and $check_code > 0) {
        print "Use ".$gpp_name." --check --verbose for more information\n" if not $hook;
    }
    return $check_code;
}

sub gpp_save () {
    print "Saving...\n" if $verbose;
    my $name = $options{'file'};
    my $fh;
    
    my $fileexists = 'false';
    if (-e $name) {
        $fileexists = 'true';
    }
    
    open($fh, "> $name") or die "Could not open file: $name\n";
    printf $fh "#FORMAT:%s\n", $dataversion;
    
    my %dirs;
    $output = `git ls-files -z`;
    foreach my $file ( split("\0", $output) ) {
        # Shamelessly copied from setgitperms.perl
        # We have to manually add stats for parent directories
        my $parent = dirname($file);
        while (!exists $dirs{$parent}) {
            $dirs{$parent} = 1;
            next if $parent eq '.';
            printf {STDERR} "DEBUG: processing %s\n", $parent if $debug;
            my ($mode, $uid, $gid) = (lstat($parent))[2,4,5];
            printf $fh "%04o:%s:%s:%s\n", $mode & 07777, $uid, $gid, $parent;
            $parent = dirname($parent);
        }
        if (-l $file) {
            printf "Skipped: '%s' is a symbolic link\n", $file if $verbose;
        } elsif (-e $file) {
            printf {STDERR} "DEBUG: processing %s\n", $file if $debug;
            my ($mode, $uid, $gid) = (lstat($file))[2,4,5];
            printf $fh "%04o:%s:%s:%s\n", $mode & 07777, $uid, $gid, $file;
        } else {
            print "WARNING: A file reported by `git ls-files` doesn't exist: $file\n";
        }
    }
    
    close($fh);
    
    if ($fileexists eq 'false') {
        print "File $name created.";
        print " You may want to add it to your repository.\n" if not $hook;
    }
}

sub gpp_restore () {
    print "Restoring...\n" if $verbose;
    my $name = $options{'file'};
    my $fh;
    my $result = 0;
    
    if (! -e $name) {
        print $gpp_name.": $name does not exist.\n";
        print "use '".$gpp_name." --save' to initialize it.\n";
        exit 0
    }
    
    open($fh, "< $name") or die "Could not open file: $name\n";
    
    while ( ! eof($fh) ) {
        defined( $_ = <$fh> ) or die "readline failed: $!";
        chomp;
        next if (/^#/);
        my ($mode, $uid, $gid, $file) = validate_values(split(/:/, $_, 4));
        next if (-l $file);
        if (-e $file) {
            print {STDERR} "DEBUG: Processing file '$file'\n" if $debug;
            if (check_ids($file, $uid, $gid) != 0) {
                $uid = -1 if (not $options{'user'});
                $gid = -1 if (not $options{'group'});
                printf "%s: Restoring owner:group to %s:%s\n", $file, $uid, $gid if $verbose;
                chown $uid, $gid, $file;
                file_status_cache_flush();
                $result |= check_ids($file, $uid, $gid);
            }
            if (check_mode($file, $mode)) {
                my $restore_mode = ((07777 & ~$options{'perms'}) & $actual_mode) | ($mode & $options{'perms'});
                printf "%s: Restoring mode to %04o\n", $file, $restore_mode if $verbose;
                chmod $restore_mode, $file;
                file_status_cache_flush();
                $result |= check_mode($file, $restore_mode);
            }
        } else {
            printf "WARNING: file '%s' does not exist\n", $file;
        }
    }
    
    close($fh);
    return $result;
}

# Execution
my $exec_code = 123;
if ($action_check) {
    $exec_code = gpp_check;
} elsif ($action_save) {
    $exec_code = gpp_save;
} elsif ($action_restore) {
    $exec_code = gpp_restore;
} else {
    print "This should not happen, no action were supplied.\n";
    usage;
    exit 2;
}

if ($old_mode_format or $changed_perms or $changed_uid or $changed_gid) {
    printf "Please update your database after making sure that your files\n";
    printf "have the correct permissions:\n";
    printf "    git preserve-permissions --save\n";
}
exit $exec_code;

