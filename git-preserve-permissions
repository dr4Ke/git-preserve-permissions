#!/usr/bin/perl
# git-preserve-permissions stores/restores metadata in a git repository
#    git-preserve-permissions Copyright (C) 2012,2013 Christophe Drevet <christophe.drevet@gmail.com>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
$version = "1.2";
use lib (split(/:/, $ENV{GITPERLLIB}));

use File::Basename;
#use integer;
my $gpp_name = basename($0);

# Arguments
use Getopt::Long;
my $action_check = 0;
my $action_save = 0;
my $action_restore = 0;
my $verbose = 0;
my $debug = 0;

GetOptions('check'   => \$action_check,
           'save'    => \$action_save,
           'restore' => \$action_restore,
           'verbose' => \$verbose,
           'debug'   => \$debug);

sub usage () {
    print $gpp_name." --check | --save | --restore [--verbose] [--debug]\n";
    print "Version: ".$version."\n";
    print "\n";
    print "Configuration:\n";
    print "    preserve-permissions.file: file to use (default: .git-preserve-permissions)\n";
    print "    preserve-permissions.user: save user id (default: false)\n";
    print "    preserve-permissions.group: save group id (default: false)\n";
    print "    preserve-permissions.perms: save permissions using this octal\n";
    print "                                mask (default: 0700)\n";
    print "\n";
    print "git-preserve-permissions Copyright (C) 2012,2013 Christophe Drevet\n";
    print "                                            <christophe.drevet\@gmail.com>\n";
    print "This program comes with ABSOLUTELY NO WARRANTY. This is free software, and you\n";
    print "are welcome to redistribute it under certain conditions; see COPYRIGHT file.\n";
}
 
if (not ($action_check || $action_save || $action_restore)) {
    usage;
    exit 2;
}

# git configuration options
use Git;
my $repo = Git->repository();
my %options;
$options{'wc_path'} = $repo->wc_path;
print $gpp_name." DEBUG: Working copy path: ".$options{'wc_path'}."\n" if $debug;
chdir $options{'wc_path'};
$options{'file'} = ($repo->config('preserve-permissions.file') or '.git-preserve-permissions');
$options{'user'} = ($repo->config_bool('preserve-permissions.user') or 0);
$options{'group'} = ($repo->config_bool('preserve-permissions.group') or 0);
$options{'perms'} = oct($repo->config('preserve-permissions.perms') or '0700');

print $gpp_name." DEBUG: settings:\n" if $debug;
print "DEBUG: preserve-permissions.user: ".$options{'user'}."\n" if $debug;
print "DEBUG: preserve-permissions.group: ".$options{'group'}."\n" if $debug;
printf "DEBUG: preserve-permissions.perms: %04o\n", $options{'perms'} if $debug;

# Execution functions
my $old_mode_format = 0;
my $changed_perms = 0;
my $changed_uid = 0;
my $changed_gid = 0;
sub validate_values {
    my ($mode, $uid, $gid, $file) = @_;
    # Checking old store format (decimal)
    if ( int($mode) > 7777 ) {
        printf "DEBUG: mode %o stored in decimal form (%d)\n", $mode, $mode if $debug;
        printf "WARNING: Modes are stored in decimal form.\n" if ($old_mode_format == 0);
        $old_mode_format = 1;
        $mode &= 07777;
    } else {
        $mode = oct($mode);
    }
    # Checking changed perms setting
    if ( $mode != ($mode & $options{'perms'})) {
        printf "WARNING: The preserve-permissions.perms setting has changed.\n" if ($changed_perms == 0);
        $changed_perms = 1;
        $mode &= $options{'perms'};
    }
    if ($options{'user'}) {
        $uid = -1 if (not length $uid);
    } else {
        if ( $uid ) {
            printf "WARNING: The preserve-permissions.user setting has changed.\n" if ($changed_uid == 0);
            $changed_uid = 1;
        }
        $uid = -1;
    }
    if ($options{'group'}) {
        $gid = -1 if (not length $gid);
    } else {
        if ( $gid ) {
            printf "WARNING: The preserve-permissions.group setting has changed.\n" if ($changed_gid == 0);
            $changed_gid = 1;
        }
        $gid = -1;
    }
    printf "DEBUG: file: %s, %04o, %s, %s\n", $file, $mode, $uid, $gid if $debug;
    return ($mode, $uid, $gid, $file);
}

sub check_ids {
    my ($file, $uid, $gid) = @_;
    my ($actual_uid, $actual_gid) = (lstat($file))[4,5];
    my $result = 0;
    if ($uid != -1 and ($actual_uid != $uid)) {
        $result = 1
    }
    if ($gid != -1 and ($actual_gid != $gid)) {
        $result = 1
    }
    return $result;
}

sub check_mode {
    my ($file, $mode) = @_;
    my ($actual_mode) = (lstat($file))[2] & 07777;
    my $result = 0;
    if ($mode != $actual_mode) {
        $result = 1
    }
    return $result;
}

sub gpp_check () {
    print "Checking...\n" if $verbose;
    my $name = $options{'file'};
    my $fh;
    my %changed_files;
    my %known_files;
    my $unknown_files = 0;
    
    if (! -e $name) {
        print $gpp_name.": $name does not exists.\n";
        print "use '".$gpp_name." --save' to initialize it.\n";
        return 1;
    }
    
    open($fh, "< $name") or die $gpp_name.": Could not open file: $name\n";
    
    # Check known files for changes
    while ( ! eof($fh) ) {
        defined( $_ = <$fh> ) or die "readline failed: $!";
        chomp;
        my ($mode, $uid, $gid, $file) = validate_values(split(/:/));
        $known_files{$file} = 1;
        if (-l $file) {
            printf "Skipped: '%s' is a symbolic link\n", $file if $verbose;
        } elsif (-e $file) {
            my ($actual_mode, $actual_uid, $actual_gid) = (lstat($file))[2,4,5];
            my $saved_mode = $actual_mode & $options{'perms'};
            if ($mode != $saved_mode) {
                $changed_files{$file} .= sprintf ' masked (%04o) mode changed from %04o to %04o,', $options{'perms'}, $mode, $saved_mode;
            }
            if ($options{'user'} and ($uid != $actual_uid)) {
                $changed_files{$file} .= ' user changed from '.$uid.' to '.$actual_uid.",";
            }
            if ($options{'group'} and ($gid  != $actual_gid)) {
                $changed_files{$file} .= ' group changed from '.$gid.' to '.$actual_gid.",";
            }
        } else {
            printf "WARNING: file '%s' does not exists\n", $file;
        }
    }
    
    # Check git ls-files for unknown files
    my $output = `find . -not -path "./.git/*" | grep -v ".git"`;
    foreach ( split("\n", $output) ) {
        if ((not -l $_) and (not exists $known_files{$_})) {
            print "File not known into $name: $_\n" if $verbose;
            $unknown_files += 1;
        }
    }
    
    
    close($fh);
    
    my $check_code = 0;

    if ($unknown_files > 0) {
        print "$unknown_files unknown file(s)\n";
        $check_code = 1;
    }

    if (scalar(keys %changed_files) != 0) {
        print "Some file(s) metadata has changed\n";
        if ($verbose) {
            while (($key, $value) = each %changed_files) {
                print "$key:$value\n";
            }
        }
        $check_code = 1;
    }
    
    if (not $verbose and $check_code > 0) {
        print "Use ".$gpp_name." --check --verbose for more information\n";
    }
    return $check_code;
}

sub gpp_save () {
    print "Saving...\n" if $verbose;
    my $name = $options{'file'};
    my $fh;
    
    my $fileexists = 'false';
    if (-e $name) {
        $fileexists = 'true';
    }
    
    open($fh, "> $name") or die "Could not open file: $name\n";
    
    $output = `find . -not -path "./.git/*" | grep -v ".git"`;
    foreach ( split("\n", $output) ) {
	my $file = $_;
        if (-l $file) {
            printf "Skipped: '%s' is a symbolic link\n", $file if $verbose;
        } elsif (-e $file) {
            printf "DEBUG: processing %s\n", $file if $debug;
            my ($mode, $uid, $gid) = (lstat($file))[2,4,5];
            $mode &= $options{'perms'};
            $uid = '' if (not $options{'user'});
            $gid = '' if (not $options{'group'});
            printf $fh "%04o:%s:%s:%s\n", $mode, $uid, $gid, $file;
        } else {
            print "WARNING: A file reported by `git ls-files` doesn't exist: $file\n";
        }
    }
    
    close($fh);
    
    if ($fileexists eq 'false') {
        print "File $name created. You may want to add it to your repository.\n"
    }
}

sub gpp_restore () {
    print "Restoring...\n" if $verbose;
    my $name = $options{'file'};
    my $fh;
    my $result = 0;
    
    if (! -e $name) {
        print $gpp_name.": $name does not exists.\n";
        print "use '".$gpp_name." --save' to initialize it.\n";
        exit 0
    }
    
    open($fh, "< $name") or die "Could not open file: $name\n";
    
    while ( ! eof($fh) ) {
        defined( $_ = <$fh> ) or die "readline failed: $!";
        chomp;
        my ($mode, $uid, $gid, $file) = validate_values(split(/:/));
        if (-l $file) {
            printf "Skipped: '%s' is a symbolic link\n", $file if $verbose;
        } elsif (-e $file) {
            print "DEBUG: Processing file '$file'\n" if $debug;
            if (($options{'user'}) or ($options{'group'})) {
                printf "%s: Restoring owner:group to %s:%s\n", $file, $uid, $gid if $verbose;
                chown $uid, $gid, $file;
                $result |= check_ids($file, $uid, $gid);
            }
            my $actual_mode = (lstat($file))[2];
            if (($actual_mode & $options{'perms'}) != ($mode & $options{'perms'})) {
                my $restore_mode = ((07777 & ~$options{'perms'}) & $actual_mode) | ($mode & $options{'perms'});
                printf "%s: Restoring mode from %04o to %04o\n", $file, $actual_mode, $restore_mode if $verbose;
                chmod $restore_mode, $file;
                $result |= check_mode($file, $restore_mode);
            }
        } else {
            printf "WARNING: file '%s' does not exists\n", $file;
        }
    }
    
    close($fh);
    return $result;
}

# Execution
my $exec_code = 123;
if ($action_check) {
    $exec_code = gpp_check;
} elsif ($action_save) {
    $exec_code = gpp_save;
} elsif ($action_restore) {
    $exec_code = gpp_restore;
} else {
    print "This should not happen, no action were supplied.\n";
    usage;
    exit 2;
}

if ($old_mode_format or $changed_perms or $changed_uid or $changed_gid) {
    printf "Please update your database with --save after making sure\n";
    printf "that your settings and metadata are up to date.\n";
}
exit $exec_code;

